# Set another default user than root for security reasons
user nginx www;

worker_processes 1;
pid /run/nginx.pid;

events {
        worker_connections 2048;
        # multi_accept on;
}

http {
        # Hide nginx version information.
        server_tokens off;

        # Speed up file transfers by using sendfile() to copy directly
        # between descriptors rather than using read()/write().
        sendfile on;
        
        # Tell Nginx not to send out partial frames; this increases throughput
        # since TCP frames are filled up before being sent out. (adds TCP_CORK)
        tcp_nopush on;
        
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;

        # server_names_hash_bucket_size 64;
        # server_name_in_redirect off;

        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        ##
        # SSL Settings
        ##

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
        ssl_prefer_server_ciphers on;

        ##
        # Logging Settings
        ##

        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        # Format to use in log files
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

        ##
        # Gzip Settings
        ##

        gzip on;

        # Tell proxies to cache both the gzipped and regular version of a resource
        # whenever the client's Accept-Encoding capabilities header varies;
        # Avoids the issue where a non-gzip capable client (which is extremely rare
        # today) would display gibberish if their proxy gave them the gzipped version.
        gzip_vary on;

        # Compress data even for clients that are connecting to us via proxies,
        # identified by the "Via" header.
        gzip_proxied any;

        # Compression level (1-9).
        # 5 is a perfect compromise between size and cpu usage, offering about
        # 75% reduction for most ascii files (almost identical to level 9).
        gzip_comp_level 5;

        # Enable compression both for HTTP/1.0 and HTTP/1.1.
        gzip_http_version 1.0;

        # Don't compress anything that's already small and unlikely to shrink much
        # if at all (the default is 20 bytes, which is bad as that usually leads to
        # larger files after gzipping).
        gzip_min_length    256;

        # Compress all output labeled with one of the following MIME-types.
        gzip_types
                application/atom+xml
                application/javascript
                application/json
                application/rss+xml
                application/vnd.ms-fontobject
                application/x-font-ttf
                application/x-web-app-manifest+json
                application/xhtml+xml
                application/xml
                font/opentype
                image/svg+xml
                image/x-icon
                text/css
                text/plain
                text/x-component;
                # text/html is always compressed by HttpGzipModule

        ##
        # Virtual Host Configs
        ##

        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;
}
